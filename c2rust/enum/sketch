
# Abstract Syntax
τ ::= Ɛ | Z | B

e ::= let x: τ = e in e
    | x
    | n
    | b
    | e + e
    | e = e
    | e ? e : e

# Subtyping rules
Ɛ <: Z
τ <: τ

# Define Functions Type
check: TEnv -> e -> (τ, TEnv)
apply: TEnv -> e -> TEnv

# Function rules
check(Γ, x) = (Γ(x), ∅)
apply(Γ, x) = [x:Ɛ]

check(Γ, n) = (Z, ∅)
apply(Γ, n) = error
    if n not in Ɛ
apply(Γ, n) = ∅
    if n in Ɛ

check(Γ, b) = (B, ∅)
apply(Γ, b) = error

check(Γ, e1 + e2) = (Z, Γ1 ++ Γ2)
    if check(Γ, e1) = (τ1, Γ1)
    and check(Γ, e2) = (τ2, Γ2)
    and τ1 <: Z
    and τ2 <: Z
apply(Γ, e1 + e2) = error

```
\frac{check(Γ, e_1) = (τ_1, Γ_1)\quad check(Γ, e_2) = (τ_2, Γ_2)\quad τ_1 <: \Z\quad τ_2 <: \Z}{check(Γ, e_1 + e_2) = (\Z, Γ_1 \cup Γ_2)}
```

check(Γ, e1 = e2) = (B, Γ1 ++ Γ2)
    if check(Γ, e1) = (τ1, Γ1)
    and check(Γ, e2) = (τ2, Γ2)
    and τ1 <: Z
    and τ2 <: Z
apply(Γ, e1 = e2) = error

```
\frac{check(Γ, e_1) = (τ_1, Γ_1)\quad check(Γ, e_2) = (τ_2, Γ_2)\quad τ_1 <: \Z\quad τ_2 <: \Z}{check(Γ, e_1 = e_2) = (\Z, Γ_1 \cup Γ_2)}
```

check(Γ, e1 ? e2 : e3) = (τ3, Γ1 ++ Γ2 ++ Γ3)
    if check(Γ, e1) = (τ1, Γ1)
    and check(Γ, e2) = (τ2, Γ2)
    and check(Γ, e3) = (τ3, Γ3)
    and τ1 = B
    and τ2 <: τ3

```
\frac{check(Γ, e_1) = (τ_1, Γ_1)\quad check(Γ, e_2) = (τ_2, Γ_2)\quad τ_1 <: \Z\quad τ_2 <: \Z}{check(Γ, e_1 ? e_2 : e_3) = (\Z, Γ_1 \cup Γ_2 \cup Γ_3)}
```

check(Γ, e1 ? e2 : e3) = (τ2, Γ1 ++ Γ2 ++ Γ3)
    if check(Γ, e1) = (τ1, Γ1)
    and check(Γ, e2) = (τ2, Γ2)
    and check(Γ, e3) = (τ3, Γ3)
    and τ1 <: B
    and τ3 <: τ2

```
\frac{check(Γ, e_1) = (τ_1, Γ_1)\quad check(Γ, e_2) = (τ_2, Γ_2)\quad τ_1 <: \Z\quad τ_2 <: \Z}{check(Γ, e_1 ? e_2 : e_3) = (\Z, Γ_1 \cup Γ_2 \cup Γ_3)}
```

apply(Γ, e1 ? e2 : e3) = Γ1 ++ Γ2 ++ Γ3 ++ [x:Ɛ]
    if check(Γ, e1) = (τ, Γ1)
    and apply(Γ, e2) = Γ2
    and apply(Γ, e3) = Γ3
    and τ = B

check(Γ, let x: τ = e1 in e2) = (τ', Γ1 ++ Γ2)
    if τ != Ɛ
    and check(Γ, e1) = (τ, Γ1)
    and check(Γ[x: τ], e2) = (τ', Γ2)
    and x not in Domain(Γ2)


check(Γ, let x: τ = e1 in e2) = error
    if τ != Ɛ
    and check(Γ, e1) = (τ, Γ1)
    and check(Γ[x: τ], e2) = (τ', Γ2)
    and x in Domain(Γ2)

check(Γ, let x: Ɛ = e1 in e2) = (τ', Γ1 ++ Γ2)
    if apply(Γ, e1) = Γ1
    and check(Γ[x: Ɛ], e2) = (τ', Γ2)

apply(Γ, let x: τ = e1 in e2) = Γ1 ++ Γ2
    if τ != Ɛ
    and check(Γ, e1) = (τ, Γ1)
    and apply(Γ, e2) = Γ2
    and τ not in Domain(Γ2)

apply(Γ, let x: Ɛ = e1 in e2) = Γ1 ++ Γ2
    if apply(Γ, e1) = Γ1
    and apply(Γ, e2) = Γ2
